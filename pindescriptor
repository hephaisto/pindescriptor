#!/usr/bin/python
import ConfigParser
import sys

# command line options
infile="pindescription.conf"
outfile="pindescription.h"
if len(sys.argv) > 1:
	infile=sys.argv[1]
if len(sys.argv) > 2:
	outfile=sys.argv[2]
if len(sys.argv) >3:
	sys.exit("usage: {0} [config [output]]".format(sys.argv[0]) )

config=ConfigParser.RawConfigParser()
config.read(infile)

with open(outfile,"w") as f:
	f.write("// THIS FILE IS AUTOMATICALLY CREATED.\n// MODIFICATIONS WILL BE LOST!\n// EDIT "+infile+" INSTEAD!\n")
	for i in range(len(config.sections())):
		section=config.sections()[i]
		used_pins=[]
		used_names=[]

		# section headers for each controller type
		f.write("\n\n// ***** "+section+" *****\n")

		ifclause="if"
		if i>0:
			ifclause="elif"
		f.write("#"+ifclause+" defined __AVR_"+section+"__\n")


		for key,value in config.items(section):

			# parse line
			pin_name=key.upper()
			used_names.append(pin_name)
			values=value.split(",")

			if len(values[0]) != 2:
				sys.exit("invalid register/bit: "+values[0])
			byte_letter=values[0][0].upper()
			bit=values[0][1]
			mode="generic"
			if len(values)>1:
				mode=values[1]
			if len(values)>2:
				sys.exit("invalid pin description: "+value)

			infodict={"mode":mode, "pin_name":pin_name, "byte_letter":byte_letter, "bit":bit}

			# header for pin
			f.write("\n// "+pin_name+"\n")

			# check for double-assignments
			pindef=(byte_letter,bit)
			if pindef in used_pins:
				warnmsg="double assignment of pin "+byte_letter+bit+"!"
				print("WARNING: "+warnmsg)
				f.write("#error "+warnmsg+"\n")
			used_pins.append(pindef)

			# defines
			f.write("#define {pin_name}_PORT\tPORT{byte_letter}\n".format(**infodict))
			f.write("#define {pin_name}_PIN\tPIN{byte_letter}\n".format(**infodict))
			f.write("#define {pin_name}_DDR\tDDR{byte_letter}\n".format(**infodict))
			f.write("#define {pin_name}_BIT\t{bit}\n".format(**infodict))
			try:
				{
					"out":		lambda:
							f.write("#define {pin_name}_INIT\t{pin_name}_DDR|=(1<<{bit})\n#define {pin_name}_ON\t{pin_name}_PORT|=(1<<{bit})\n#define {pin_name}_OFF\t{pin_name}_PORT&=~(1<<{bit})\n"\
								.format(**infodict)),
					"in":		lambda:
							f.write("#define {pin_name}_INIT\t{pin_name}_DDR&=~(1<<{bit}) {pin_name}_PORT&=~(1<< {bit})\n#define {pin_name}_IS_ON\t{pin_name}_PIN&(1<<{bit})\n#define {pin_name}_INPUT_BIT\t({pin_name}_PIN&(1<<{bit}))>>{bit}\n"\
								.format(**infodict)),
					"pullup":	lambda:
							f.write("#define {pin_name}_INIT\t{pin_name}_DDR&=~(1<<{bit}) {pin_name}_PORT|=(1<< {bit})\n#define {pin_name}_IS_ON\t{pin_name}_PIN&(1<<{bit})\n#define {pin_name}_INPUT_BIT\t({pin_name}_PIN&(1<<{bit}))>>{bit}\n"\
							.format(**infodict)),
					"generic":	lambda:
							f.write("#define {pin_name}_INIT\n"\
							.format(**infodict))	# just do nothing on init
				}[mode]()
			except:
				sys.exit("unknown mode "+mode)

		# one big init routine
		f.write("#define INIT_ALL_PINS")
		for j in range(len(used_names)):
			pin=used_names[j]
			f.write("\\\n\t"+pin+"_INIT")
			if j!=len(used_names)-1:
				f.write(";")
		f.write("\n")

	# end of controller section
	f.write("\n\n// ***** other controllers *****\n")
	f.write("#else\n")
	f.write("\t#error no pinout defined for this controller type\n")
	f.write("#endif\n")
