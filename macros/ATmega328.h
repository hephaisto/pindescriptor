// This file was autogenerated from ATmega328.conf. Do not edit manually!
#define SET_BIT_0(name) name ## _reg &= ~(1<<name)
#define SET_BIT_1(name) name ## _reg |= (1<<name)
// registers for all used bit names
#define DORD0_reg SPCR0
#define OCR2AUB_reg ASSR
#define SPE0_reg SPCR0
#define COM2A0_reg TCCR2A
#define COM2A1_reg TCCR2A
#define ACME_reg ADCSRB
#define TOIE2_reg TIMSK2
#define TOIE0_reg TIMSK0
#define TOIE1_reg TIMSK1
#define TCN2UB_reg ASSR
#define OCIE1B_reg TIMSK1
#define ADATE_reg ADCSRA
#define SPR00_reg SPCR0
#define SPR01_reg SPCR0
#define TOV0_reg TIFR0
#define TCR2AUB_reg ASSR
#define OCIE0B_reg TIMSK0
#define OCIE0A_reg TIMSK0
#define OCIE2A_reg TIMSK2
#define OCIE2B_reg TIMSK2
#define SPIE0_reg SPCR0
#define MUX2_reg ADMUX
#define MUX3_reg ADMUX
#define MUX0_reg ADMUX
#define MUX1_reg ADMUX
#define FOC0A_reg TCCR0B
#define FOC0B_reg TCCR0B
#define WCOL0_reg SPSR0
#define ADTS1_reg ADCSRB
#define ADTS0_reg ADCSRB
#define ADTS2_reg ADCSRB
#define ADLAR_reg ADMUX
#define COM2B1_reg TCCR2A
#define COM2B0_reg TCCR2A
#define ADC4D_reg DIDR0
#define ICIE1_reg TIMSK1
#define MSTR0_reg SPCR0
#define COM0B1_reg TCCR0A
#define COM0B0_reg TCCR0A
#define OCF0B_reg TIFR0
#define CS20_reg TCCR2B
#define CS21_reg TCCR2B
#define CS22_reg TCCR2B
#define WGM11_reg TCCR1A
#define WGM10_reg TCCR1A
#define WGM13_reg TCCR1B
#define WGM12_reg TCCR1B
#define ACI_reg ACSR
#define ACO_reg ACSR
#define ACIS0_reg ACSR
#define ADC3D_reg DIDR0
#define ADSC_reg ADCSRA
#define ACIE_reg ACSR
#define ACIC_reg ACSR
#define ADPS1_reg ADCSRA
#define ADPS0_reg ADCSRA
#define ADPS2_reg ADCSRA
#define COM0A0_reg TCCR0A
#define COM0A1_reg TCCR0A
#define OC0A_reg TIFR0
#define ACIS1_reg ACSR
#define FOC2B_reg TCCR2B
#define FOC2A_reg TCCR2B
#define AS2_reg ASSR
#define WGM02_reg TCCR0B
#define WGM00_reg TCCR0A
#define WGM01_reg TCCR0A
#define OCIE1A_reg TIMSK1
#define EXCLK_reg ASSR
#define ADIE_reg ADCSRA
#define ADIF_reg ADCSRA
#define REFS1_reg ADMUX
#define REFS0_reg ADMUX
#define FOC1B_reg TCCR1C
#define FOC1A_reg TCCR1C
#define ACBG_reg ACSR
#define CS02_reg TCCR0B
#define CS00_reg TCCR0B
#define CS01_reg TCCR0B
#define ACD_reg ACSR
#define ADC1D_reg DIDR0
#define SPI2X0_reg SPSR0
#define CPHA0_reg SPCR0
#define COM1A1_reg TCCR1A
#define COM1A0_reg TCCR1A
#define ADEN_reg ADCSRA
#define SPIF0_reg SPSR0
#define ICNC1_reg TCCR1B
#define CS11_reg TCCR1B
#define CS10_reg TCCR1B
#define CS12_reg TCCR1B
#define WGM20_reg TCCR2A
#define WGM21_reg TCCR2A
#define WGM22_reg TCCR2B
#define ADC0D_reg DIDR0
#define ADC5D_reg DIDR0
#define COM1B0_reg TCCR1A
#define COM1B1_reg TCCR1A
#define ADC2D_reg DIDR0
#define ICES1_reg TCCR1B
#define CPOL0_reg SPCR0
#define OCR2BUB_reg ASSR
#define TCR2BUB_reg ASSR

// timer0_mode

inline void timer0_mode_normal()
{
	TCCR0B &= ~(1<<WGM02);
	TCCR0A &= ~(1<<WGM01);
	TCCR0A &= ~(1<<WGM00);
}

inline void timer0_mode_pwm_phasecorrect_until_0xFF()
{
	TCCR0B &= ~(1<<WGM02);
	TCCR0A &= ~(1<<WGM01);
	TCCR0A |=  (1<<WGM00);
}

inline void timer0_mode_ctc()
{
	TCCR0B &= ~(1<<WGM02);
	TCCR0A |=  (1<<WGM01);
	TCCR0A &= ~(1<<WGM00);
}

inline void timer0_mode_fast_pwm_until_0xFF()
{
	TCCR0B &= ~(1<<WGM02);
	TCCR0A |=  (1<<WGM01);
	TCCR0A |=  (1<<WGM00);
}

inline void timer0_mode_pwm_phasecorrect_until_OCR0A()
{
	TCCR0B |=  (1<<WGM02);
	TCCR0A &= ~(1<<WGM01);
	TCCR0A |=  (1<<WGM00);
}

inline void timer0_mode_fast_pwm_until_OCR0A()
{
	TCCR0B |=  (1<<WGM02);
	TCCR0A |=  (1<<WGM01);
	TCCR0A |=  (1<<WGM00);
}

// timer0_clockselect

inline void timer0_clockselect_none()
{
	TCCR0B &= ~(1<<CS02);
	TCCR0B &= ~(1<<CS01);
	TCCR0B &= ~(1<<CS00);
}

inline void timer0_clockselect_io_1()
{
	TCCR0B &= ~(1<<CS02);
	TCCR0B &= ~(1<<CS01);
	TCCR0B |=  (1<<CS00);
}

inline void timer0_clockselect_io_8()
{
	TCCR0B &= ~(1<<CS02);
	TCCR0B |=  (1<<CS01);
	TCCR0B &= ~(1<<CS00);
}

inline void timer0_clockselect_io_64()
{
	TCCR0B &= ~(1<<CS02);
	TCCR0B |=  (1<<CS01);
	TCCR0B |=  (1<<CS00);
}

inline void timer0_clockselect_io_256()
{
	TCCR0B |=  (1<<CS02);
	TCCR0B &= ~(1<<CS01);
	TCCR0B &= ~(1<<CS00);
}

inline void timer0_clockselect_io_1024()
{
	TCCR0B |=  (1<<CS02);
	TCCR0B &= ~(1<<CS01);
	TCCR0B |=  (1<<CS00);
}

inline void timer0_clockselect_on_falling_T0()
{
	TCCR0B |=  (1<<CS02);
	TCCR0B |=  (1<<CS01);
	TCCR0B &= ~(1<<CS00);
}

inline void timer0_clockselect_on_rising_T0()
{
	TCCR0B |=  (1<<CS02);
	TCCR0B |=  (1<<CS01);
	TCCR0B |=  (1<<CS00);
}

// timer0_out_A

inline void timer0_out_A_no_pwm()
{
	TCCR0A &= ~(1<<COM0A1);
	TCCR0A &= ~(1<<COM0A0);
}

inline void timer0_out_A_clear_on_compare_match()
{
	TCCR0A |=  (1<<COM0A1);
	TCCR0A &= ~(1<<COM0A0);
}

inline void timer0_out_A_set_on_compare_match()
{
	TCCR0A |=  (1<<COM0A1);
	TCCR0A |=  (1<<COM0A0);
}

// timer0_out_B

inline void timer0_out_B_no_pwm()
{
	TCCR0A &= ~(1<<COM0B1);
	TCCR0A &= ~(1<<COM0B0);
}

inline void timer0_out_B_clear_on_compare_match()
{
	TCCR0A |=  (1<<COM0B1);
	TCCR0A &= ~(1<<COM0B0);
}

inline void timer0_out_B_set_on_compare_match()
{
	TCCR0A |=  (1<<COM0B1);
	TCCR0A |=  (1<<COM0B0);
}

// timer1_mode

inline void timer1_mode_normal()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_phasecorrect_until_0x00FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_pwm_phasecorrect_until_0x01FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_phasecorrect_until_0x03FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_ctc_until_OCR1A()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_fast_until_0x00FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_pwm_fast_until_0x01FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_fast_until_0x03FF()
{
	TCCR1B &= ~(1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_pwm_phasefrequencycorrect_until_ICR1()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_phasefrequencycorrect_until_OCR1A()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_pwm_phasecorrect_until_ICR1()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_phasecorrect_until_OCR1A()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B &= ~(1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

inline void timer1_mode_ctc_until_ICR1()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A &= ~(1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_fast_until_ICR1()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A &= ~(1<<WGM10);
}

inline void timer1_mode_pwm_fast_until_OCR1A()
{
	TCCR1B |=  (1<<WGM13);
	TCCR1B |=  (1<<WGM12);
	TCCR1A |=  (1<<WGM11);
	TCCR1A |=  (1<<WGM10);
}

// timer1_clockselect

inline void timer1_clockselect_none()
{
	TCCR1B &= ~(1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B &= ~(1<<CS10);
}

inline void timer1_clockselect_io_1()
{
	TCCR1B &= ~(1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B |=  (1<<CS10);
}

inline void timer1_clockselect_io_8()
{
	TCCR1B &= ~(1<<CS12);
	TCCR1B |=  (1<<CS11);
	TCCR1B &= ~(1<<CS10);
}

inline void timer1_clockselect_io_64()
{
	TCCR1B &= ~(1<<CS12);
	TCCR1B |=  (1<<CS11);
	TCCR1B |=  (1<<CS10);
}

inline void timer1_clockselect_io_256()
{
	TCCR1B |=  (1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B &= ~(1<<CS10);
}

inline void timer1_clockselect_io_1024()
{
	TCCR1B |=  (1<<CS12);
	TCCR1B &= ~(1<<CS11);
	TCCR1B |=  (1<<CS10);
}

inline void timer1_clockselect_on_falling_T1()
{
	TCCR1B |=  (1<<CS12);
	TCCR1B |=  (1<<CS11);
	TCCR1B &= ~(1<<CS10);
}

inline void timer1_clockselect_on_rising_T1()
{
	TCCR1B |=  (1<<CS12);
	TCCR1B |=  (1<<CS11);
	TCCR1B |=  (1<<CS10);
}

// timer1_out_A

inline void timer1_out_A_no_pwm()
{
	TCCR1A &= ~(1<<COM1A1);
	TCCR1A &= ~(1<<COM1A0);
}

inline void timer1_out_A_clear_on_compare_match()
{
	TCCR1A |=  (1<<COM1A1);
	TCCR1A &= ~(1<<COM1A0);
}

inline void timer1_out_A_set_on_compare_match()
{
	TCCR1A |=  (1<<COM1A1);
	TCCR1A |=  (1<<COM1A0);
}

// timer1_out_B

inline void timer1_out_B_no_pwm()
{
	TCCR1A &= ~(1<<COM1B1);
	TCCR1A &= ~(1<<COM1B0);
}

inline void timer1_out_B_clear_on_compare_match()
{
	TCCR1A |=  (1<<COM1B1);
	TCCR1A &= ~(1<<COM1B0);
}

inline void timer1_out_B_set_on_compare_match()
{
	TCCR1A |=  (1<<COM1B1);
	TCCR1A |=  (1<<COM1B0);
}

// timer2_mode

inline void timer2_mode_normal()
{
	TCCR2B &= ~(1<<WGM22);
	TCCR2A &= ~(1<<WGM21);
	TCCR2A &= ~(1<<WGM20);
}

inline void timer2_mode_pwm_phasecorrect_until_0xFF()
{
	TCCR2B &= ~(1<<WGM22);
	TCCR2A &= ~(1<<WGM21);
	TCCR2A |=  (1<<WGM20);
}

inline void timer2_mode_ctc_until_OCR2A()
{
	TCCR2B &= ~(1<<WGM22);
	TCCR2A |=  (1<<WGM21);
	TCCR2A &= ~(1<<WGM20);
}

inline void timer2_mode_pwm_fast_until_0xFF()
{
	TCCR2B &= ~(1<<WGM22);
	TCCR2A |=  (1<<WGM21);
	TCCR2A |=  (1<<WGM20);
}

inline void timer2_mode_pwm_phasecorrect_until_OCR2A()
{
	TCCR2B |=  (1<<WGM22);
	TCCR2A &= ~(1<<WGM21);
	TCCR2A |=  (1<<WGM20);
}

inline void timer2_mode_pwm_fast_until_OCR2A()
{
	TCCR2B |=  (1<<WGM22);
	TCCR2A |=  (1<<WGM21);
	TCCR2A |=  (1<<WGM20);
}

// timer2_clockselect

inline void timer2_clockselect_none()
{
	TCCR2B &= ~(1<<CS22);
	TCCR2B &= ~(1<<CS21);
	TCCR2B &= ~(1<<CS20);
}

inline void timer2_clockselect_t2clk_1()
{
	TCCR2B &= ~(1<<CS22);
	TCCR2B &= ~(1<<CS21);
	TCCR2B |=  (1<<CS20);
}

inline void timer2_clockselect_t2clk_8()
{
	TCCR2B &= ~(1<<CS22);
	TCCR2B |=  (1<<CS21);
	TCCR2B &= ~(1<<CS20);
}

inline void timer2_clockselect_t2clk_32()
{
	TCCR2B &= ~(1<<CS22);
	TCCR2B |=  (1<<CS21);
	TCCR2B |=  (1<<CS20);
}

inline void timer2_clockselect_t2clk_64()
{
	TCCR2B |=  (1<<CS22);
	TCCR2B &= ~(1<<CS21);
	TCCR2B &= ~(1<<CS20);
}

inline void timer2_clockselect_t2clk_128()
{
	TCCR2B |=  (1<<CS22);
	TCCR2B &= ~(1<<CS21);
	TCCR2B |=  (1<<CS20);
}

inline void timer2_clockselect_t2clk_256()
{
	TCCR2B |=  (1<<CS22);
	TCCR2B |=  (1<<CS21);
	TCCR2B &= ~(1<<CS20);
}

inline void timer2_clockselect_t2clk_1024()
{
	TCCR2B |=  (1<<CS22);
	TCCR2B |=  (1<<CS21);
	TCCR2B |=  (1<<CS20);
}

// ac_positive_bandgap

inline void ac_positive_bandgap_disable()
{
	ACSR &= ~(1<<ACBG);
}

inline void ac_positive_bandgap_enable()
{
	ACSR |=  (1<<ACBG);
}

// ac_timer1_capture

inline void ac_timer1_capture_disable()
{
	ACSR &= ~(1<<ACIC);
}

inline void ac_timer1_capture_enable()
{
	ACSR |=  (1<<ACIC);
}

// ac_interrupt_mode

inline void ac_interrupt_mode_toggle()
{
	ACSR &= ~(1<<ACIS1);
	ACSR &= ~(1<<ACIS0);
}

inline void ac_interrupt_mode_falling()
{
	ACSR |=  (1<<ACIS1);
	ACSR &= ~(1<<ACIS0);
}

inline void ac_interrupt_mode_rising()
{
	ACSR |=  (1<<ACIS1);
	ACSR |=  (1<<ACIS0);
}

// adc_reference

inline void adc_reference_aref()
{
	ADMUX &= ~(1<<REFS1);
	ADMUX &= ~(1<<REFS0);
}

inline void adc_reference_avcc()
{
	ADMUX &= ~(1<<REFS1);
	ADMUX |=  (1<<REFS0);
}

inline void adc_reference_internal()
{
	ADMUX |=  (1<<REFS1);
	ADMUX |=  (1<<REFS0);
}

// adc_adjust

inline void adc_adjust_right()
{
	ADMUX &= ~(1<<ADLAR);
}

inline void adc_adjust_left()
{
	ADMUX |=  (1<<ADLAR);
}

// adc_multiplexer

inline void adc_multiplexer_adc0()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX &= ~(1<<MUX2);
	ADMUX &= ~(1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_adc1()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX &= ~(1<<MUX2);
	ADMUX &= ~(1<<MUX1);
	ADMUX |=  (1<<MUX0);
}

inline void adc_multiplexer_adc2()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX &= ~(1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_adc3()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX &= ~(1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX |=  (1<<MUX0);
}

inline void adc_multiplexer_adc4()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX &= ~(1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_adc5()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX &= ~(1<<MUX1);
	ADMUX |=  (1<<MUX0);
}

inline void adc_multiplexer_adc6()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_adc7()
{
	ADMUX &= ~(1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX |=  (1<<MUX0);
}

inline void adc_multiplexer_temperature()
{
	ADMUX |=  (1<<MUX3);
	ADMUX &= ~(1<<MUX2);
	ADMUX &= ~(1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_1V1()
{
	ADMUX |=  (1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX &= ~(1<<MUX0);
}

inline void adc_multiplexer_0V()
{
	ADMUX |=  (1<<MUX3);
	ADMUX |=  (1<<MUX2);
	ADMUX |=  (1<<MUX1);
	ADMUX |=  (1<<MUX0);
}

// adc_enable

inline void adc_enable_on()
{
	ADCSRA &= ~(1<<ADEN);
}

inline void adc_enable_off()
{
	ADCSRA |=  (1<<ADEN);
}

// adc

inline void adc_stop()
{
	ADCSRA &= ~(1<<ADSC);
}

inline void adc_start()
{
	ADCSRA |=  (1<<ADSC);
}

// adc_auto_trigger

inline void adc_auto_trigger_disable()
{
	ADCSRA &= ~(1<<ADATE);
}

inline void adc_auto_trigger_enable()
{
	ADCSRA |=  (1<<ADATE);
}

// adc_prescaler

inline void adc_prescaler_2()
{
	ADCSRA &= ~(1<<ADPS2);
	ADCSRA &= ~(1<<ADPS1);
	ADCSRA |=  (1<<ADPS0);
}

inline void adc_prescaler_4()
{
	ADCSRA &= ~(1<<ADPS2);
	ADCSRA |=  (1<<ADPS1);
	ADCSRA &= ~(1<<ADPS0);
}

inline void adc_prescaler_8()
{
	ADCSRA &= ~(1<<ADPS2);
	ADCSRA |=  (1<<ADPS1);
	ADCSRA |=  (1<<ADPS0);
}

inline void adc_prescaler_16()
{
	ADCSRA |=  (1<<ADPS2);
	ADCSRA &= ~(1<<ADPS1);
	ADCSRA &= ~(1<<ADPS0);
}

inline void adc_prescaler_32()
{
	ADCSRA |=  (1<<ADPS2);
	ADCSRA &= ~(1<<ADPS1);
	ADCSRA |=  (1<<ADPS0);
}

inline void adc_prescaler_64()
{
	ADCSRA |=  (1<<ADPS2);
	ADCSRA |=  (1<<ADPS1);
	ADCSRA &= ~(1<<ADPS0);
}

inline void adc_prescaler_128()
{
	ADCSRA |=  (1<<ADPS2);
	ADCSRA |=  (1<<ADPS1);
	ADCSRA |=  (1<<ADPS0);
}

// adc_trigger_source

inline void adc_trigger_source_free_running()
{
	ADCSRB &= ~(1<<ADTS2);
	ADCSRB &= ~(1<<ADTS1);
	ADCSRB &= ~(1<<ADTS0);
}

inline void adc_trigger_source_analog_comparator()
{
	ADCSRB &= ~(1<<ADTS2);
	ADCSRB &= ~(1<<ADTS1);
	ADCSRB |=  (1<<ADTS0);
}

inline void adc_trigger_source_external_int_0()
{
	ADCSRB &= ~(1<<ADTS2);
	ADCSRB |=  (1<<ADTS1);
	ADCSRB &= ~(1<<ADTS0);
}

inline void adc_trigger_source_t0_compA()
{
	ADCSRB &= ~(1<<ADTS2);
	ADCSRB |=  (1<<ADTS1);
	ADCSRB |=  (1<<ADTS0);
}

inline void adc_trigger_source_t0_ovf()
{
	ADCSRB |=  (1<<ADTS2);
	ADCSRB &= ~(1<<ADTS1);
	ADCSRB &= ~(1<<ADTS0);
}

inline void adc_trigger_source_t1_compB()
{
	ADCSRB |=  (1<<ADTS2);
	ADCSRB &= ~(1<<ADTS1);
	ADCSRB |=  (1<<ADTS0);
}

inline void adc_trigger_source_t1_ovf()
{
	ADCSRB |=  (1<<ADTS2);
	ADCSRB |=  (1<<ADTS1);
	ADCSRB &= ~(1<<ADTS0);
}

inline void adc_trigger_source_t1_capture()
{
	ADCSRB |=  (1<<ADTS2);
	ADCSRB |=  (1<<ADTS1);
	ADCSRB |=  (1<<ADTS0);
}

// interrupts


inline void int_timer0_compA_enable()
{
	TIMSK0 |=  (1<<OCIE0A);
}

inline void int_timer0_compA_disable()
{
	TIMSK0 &= ~(1<<OCIE0A);
}

inline void int_timer0_compB_enable()
{
	TIMSK0 |=  (1<<OCIE0B);
}

inline void int_timer0_compB_disable()
{
	TIMSK0 &= ~(1<<OCIE0B);
}

inline void int_timer0_overflow_enable()
{
	TIMSK0 |=  (1<<TOIE0);
}

inline void int_timer0_overflow_disable()
{
	TIMSK0 &= ~(1<<TOIE0);
}

inline void int_timer1_input_capture_enable()
{
	TIMSK1 |=  (1<<ICIE1);
}

inline void int_timer1_input_capture_disable()
{
	TIMSK1 &= ~(1<<ICIE1);
}

inline void int_timer1_compA_enable()
{
	TIMSK1 |=  (1<<OCIE1A);
}

inline void int_timer1_compA_disable()
{
	TIMSK1 &= ~(1<<OCIE1A);
}

inline void int_timer1_compB_enable()
{
	TIMSK1 |=  (1<<OCIE1B);
}

inline void int_timer1_compB_disable()
{
	TIMSK1 &= ~(1<<OCIE1B);
}

inline void int_timer1_overflow_enable()
{
	TIMSK1 |=  (1<<TOIE1);
}

inline void int_timer1_overflow_disable()
{
	TIMSK1 &= ~(1<<TOIE1);
}

inline void int_ac_enable()
{
	ACSR |=  (1<<ACIE);
}

inline void int_ac_disable()
{
	ACSR &= ~(1<<ACIE);
}

inline void int_adc_enable()
{
	ADCSRA |=  (1<<ADIE);
}

inline void int_adc_disable()
{
	ADCSRA &= ~(1<<ADIE);
}
